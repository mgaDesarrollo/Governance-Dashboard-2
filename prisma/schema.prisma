// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
provider = "prisma-client-js"
}

datasource db {
provider = "postgresql"
url      = env("DATABASE_URL")
}

enum UserRole {
SUPER_ADMIN
ADMIN
CORE_CONTRIBUTOR
}

// Nuevo enum para el estado de disponibilidad del usuario
enum UserAvailabilityStatus {
AVAILABLE
BUSY
VERY_BUSY
}

enum ProposalStatus {
IN_REVIEW
APPROVED
REJECTED
EXPIRED
}

enum VoteType {
POSITIVE
NEGATIVE
ABSTAIN
}

model User {
id            String    @id
name          String
email         String?
image         String?
role          UserRole  @default(CORE_CONTRIBUTOR)
createdAt     DateTime  @default(now())
updatedAt     DateTime  @updatedAt

// Campos existentes
walletAddress String?   @db.Text
status        UserAvailabilityStatus? @default(AVAILABLE)
reputation    Int       @default(0)      // Puntuación de reputación
fullname      String?   @db.VarChar(255) // Nombre completo opcional

// Nuevos campos solicitados
skills        String?   @db.Text // Usamos Text para mayor flexibilidad que Varchar(255)
country       String?   @db.VarChar(255)
languages     String?   @db.Text // Usamos Text para mayor flexibilidad

// Relaciones
proposals           Proposal[]
votes               Vote[]
comments            Comment[]
professionalProfile ProfessionalProfile?
socialLinks         SocialLinks?
workgroups          WorkGroup[] @relation("UserWorkgroups") // Relación muchos a muchos con WorkGroup
workGroups          WorkGroupMember[]
createdQuarterlyReports QuarterlyReport[] @relation("CreatedQuarterlyReports")
quarterlyReportParticipants QuarterlyReportParticipant[]
quarterlyReportComments QuarterlyReportComment[]
  joinRequests        WorkGroupJoinRequest[]

}

// Nueva tabla para el perfil profesional
model ProfessionalProfile {
id         String   @id @default(cuid())
userId     String   @unique
tagline    String?  @db.VarChar(255)
bio        String?  @db.Text
experience String?  @db.Text
linkCv     String?  @db.VarChar(2048)
createdAt  DateTime @default(now())
updatedAt  DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@index([userId])

}

// Nueva tabla para los enlaces sociales
model SocialLinks {
id        String   @id @default(cuid())
userId    String   @unique
facebook  String?  @db.VarChar(2048)
linkedin  String?  @db.VarChar(2048)
github    String?  @db.VarChar(2048)
x         String?  @db.VarChar(2048) // Para Twitter/X
createdAt DateTime @default(now())
updatedAt DateTime @updatedAt

user User @relation(fields: [userId], references: [id], onDelete: Cascade)

@@index([userId])
}

// Elimina el modelo Workgroup (minúscula) y usa solo WorkGroup (mayúscula)
// Cambia todas las referencias de Workgroup a WorkGroup

// Elimina este bloque si existe:
// model Workgroup {
//   ...
// }

// Asegúrate de que todas las relaciones sean con WorkGroup
// Por ejemplo, en Proposal:
// workgroupId   String?        // Clave foránea opcional para WorkGroup
// workgroup     WorkGroup?     @relation(fields: [workgroupId], references: [id])

// En QuarterlyReport:
// workGroupId   String
// workGroup     WorkGroup @relation(fields: [workGroupId], references: [id])

// En WorkGroup:
// quarterlyReports QuarterlyReport[]

model Proposal {
id            String         @id @default(cuid())
title         String
description   String
createdAt     DateTime       @default(now())
updatedAt     DateTime       @updatedAt  // Este campo ya existe y se actualiza automáticamente
expiresAt     DateTime
status        ProposalStatus @default(IN_REVIEW)
positiveVotes Int            @default(0)
negativeVotes Int            @default(0)
abstainVotes  Int            @default(0)

// Relations
authorId      String
author        User           @relation(fields: [authorId], references: [id])
votes         Vote[]
comments      Comment[]

// Nueva relación con WorkGroup
workgroupId   String?        // Clave foránea opcional para WorkGroup
workgroup     WorkGroup?     @relation(fields: [workgroupId], references: [id])

@@index([authorId])
@@index([workgroupId])
}

model Vote {
id         String   @id @default(cuid())
type       VoteType
createdAt  DateTime @default(now())
updatedAt  DateTime @updatedAt

// Relations
userId     String
user       User     @relation(fields: [userId], references: [id])
proposalId String
proposal   Proposal @relation(fields: [proposalId], references: [id])

@@unique([userId, proposalId])
@@index([userId])
@@index([proposalId])
}

model Comment {
id         String   @id @default(cuid())
content    String
createdAt  DateTime @default(now())
updatedAt  DateTime @updatedAt

// Relations
userId     String
user       User     @relation(fields: [userId], references: [id])
proposalId String
proposal   Proposal @relation(fields: [proposalId], references: [id])

@@unique([userId, proposalId]) // Un usuario solo puede comentar una vez por propuesta
@@index([userId])
@@index([proposalId])
}

model WorkGroup {
  id                 String   @id @default(uuid())
  name               String   @unique
  type               String
  dateOfCreation     DateTime
  status             String
  missionStatement   String
  goalsAndFocus      String[] // Array de strings (PostgreSQL recomendado)
  totalMembers       String
  roles              String[] // Array de strings
  memberDirectoryLink String
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  members WorkGroupMember[]
  joinRequests       WorkGroupJoinRequest[]
  quarterlyReports   QuarterlyReport[]
  proposals Proposal[]
  users User[] @relation("UserWorkgroups")
}

model WorkGroupMember {
  id          String   @id @default(uuid())
  userId      String
  workGroupId String
  role        String   // Ej: "member", "admin", etc.
  joinedAt    DateTime @default(now())

  user        User      @relation(fields: [userId], references: [id])
  workGroup   WorkGroup @relation(fields: [workGroupId], references: [id])
}

model WorkGroupJoinRequest {
  id           String   @id @default(uuid())
  userId       String   // ID del usuario que solicita (ajusta según tu modelo de usuario)
  workGroupId  String
  status       String   // "pending", "approved", "rejected"
  message      String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  workGroup    WorkGroup @relation(fields: [workGroupId], references: [id])
  user        User      @relation(fields: [userId], references: [id]) // Si tienes modelo User
}

model QuarterlyReport {
  id            String   @id @default(uuid())
  workGroupId   String
  workGroup     WorkGroup @relation(fields: [workGroupId], references: [id])
  year          Int
  quarter       String   // "Q1", "Q2", "Q3", "Q4"
  detail        String   // Breve detalle del reporte
  theoryOfChange String  // Teoría de cambios / objetivo
  challenges    String   // Desafíos y aprendizajes
  participation String   // Participación (usuarios, admins, asistencia, nuevos, colaboraciones)
  plans         String   // Planes para el próximo trimestre
  createdById   String   // Usuario que crea el reporte
  createdBy     User     @relation("CreatedQuarterlyReports", fields: [createdById], references: [id])
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  participants  QuarterlyReportParticipant[]
  budgetItems   QuarterlyReportBudgetItem[]
  comments      QuarterlyReportComment[]
}

model QuarterlyReportParticipant {
  id                String   @id @default(uuid())
  quarterlyReportId String
  userId            String
  user              User     @relation(fields: [userId], references: [id])
  quarterlyReport   QuarterlyReport @relation(fields: [quarterlyReportId], references: [id])
}

model QuarterlyReportBudgetItem {
  id                String   @id @default(uuid())
  quarterlyReportId String
  name              String
  description       String
  amountUsd         Float
  quarterlyReport   QuarterlyReport @relation(fields: [quarterlyReportId], references: [id])
}

model QuarterlyReportComment {
  id                String   @id @default(uuid())
  quarterlyReportId String
  userId            String
  content           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  quarterlyReport   QuarterlyReport @relation(fields: [quarterlyReportId], references: [id])
  user              User     @relation(fields: [userId], references: [id])

  @@unique([quarterlyReportId, userId]) // Solo un comentario por usuario por reporte
}
